{
    "data":{
        "slug": "",
        "code": "",
        "topic": "Program to check if a number is Magic number or not.",
        "description": "What is a Magic number?\nA number is said to be a magic number, if the recursive sum of digits upto a single digit is 1. In other words, if we have a number and we sum up its digits and get another number which is at least 2 digit number, then we have to again find the sum of the digits of this number. We carry on this process until we have a single digit number as the sum. If this single digit sum is 1, only then is the number said to be a Magic number.\n",
        "example": "> For example : \"35011\" is a Magic number\nExplanation : \"3 + 5 + 0 + 1 + 1 = 10\"\nAs we get 2 digit sum we have to again find the sum of its digits.\n1 + 0 = 1\nAs we get 1 as the sum, so 35011 is a magic number\n\nSample Input : 167328\nSample Output : It is not a MAGIC number\nExplanation : \n167328 is not a Magic number.\n1 + 6 + 7 + 3 + 2 + 8 = 27\n2 + 7 = 9\nSo, it is not a Magic number.\n",
        "solutions": [
            {
				"topic": "Simple Solution",
				"description": "The loop in this code mainly runs m times, where m is the number of digits in the given number. Mostly we get a 2-digit number as the sum in the second case for which the loop executes 2 more times. For very large numbers this can be ignored and the running time is almost linear.\n",
				"algorithm": "Magic(num)\ninitialize sum = 0\n/*loop runs until num becomes 0 or if sum > 9*/\nwhile num > 0 or sum > 9\n 	if num = 0\nnum = sum\nsum = 0\n 	end if\nsum = sum + num % 10     //finding sum of digits\n   num = num / 10  \nif sum = 1\nprint “MAGIC number”\nend while       \n\n",
				"code": [
					{
						"language": "c++",
						"code": "#include<iostream>\nusing namespace std;\n\nvoid isMagic(int num)\n{\n    int sum = 0;\n    /*loop stops when n becomes 0 and\n    sum becomes single digit*/\n    while (num > 0 || sum > 9)\n    {\n        if (num == 0)\n        {\n            num = sum;\n            sum = 0;\n        }\n        sum += num % 10;\n        num /= 10;\n    }\n  if(sum == 1)      //checking if sum equals 1\n    cout<<\"It is a MAGIC number\";\n  else\n     cout<<\"It is NOT a MAGIC number\";\n}\n\nint main()\n{\n    int n = 53011;\n    isMagic(n);\n    return 0;\n}"
          },
          {
            "language": "java",
            "code": "import java.io.*;\nclass Magicnumber\n{\n   public static void isMagic(int num)\n   {\n       int sum = 0;\n       /*loop stops when n becomes 0 and\n       sum becomes single digit*/\n       while (num > 0 || sum > 9)\n       {\n           if (num == 0)\n           {\n               num = sum;\n               sum = 0;\n           }\n           sum += num % 10;   //adding the digits\n           num /= 10;\n       }\n      if (sum == 1)          //checking if sum equals 1\n         System.out.println(\"It is a MAGIC Number\");\n      else \n        System.out.println(\"It is not a MAGIC Number\");\n   }\n   \n   public static void main(String args[])\n    {\n     int n = 167328;\n     isMagic(n);\n    }\n}"
          }
				],
				"complexity" : ">The time complexity can be said to be __O(m+c) = O(m)__ , where c is a constant and m is the number of digits in the given original number.\nThe space complexity is __O(1)__.\n"
            }
        ]
    }
}
